{
  "comments": [
    {
      "key": {
        "uuid": "15692f28_11959697",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 714,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "Separate function isn\u0027t needed. Implement this directly in startNetworkScan().",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05d8c13b_3732f779",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 714,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15692f28_11959697",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "737366a6_19051c6b",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 725,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "Check bound on size.",
      "range": {
        "startLine": 725,
        "startChar": 27,
        "endLine": 725,
        "endChar": 49
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cd7319f_824554da",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 725,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "I checked this in the first version but Robert believed that this check should not happen here so I moved it to the Telephony.",
      "parentUuid": "737366a6_19051c6b",
      "range": {
        "startLine": 725,
        "startChar": 27,
        "endLine": 725,
        "endChar": 49
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b3b6081_8fdd0dd3",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 725,
      "author": {
        "id": 1002609
      },
      "writtenOn": "2017-05-30T19:03:43Z",
      "side": 1,
      "message": "Robert was wrong.\n\nIt looked like you were input checking, but what Amit\u0027s talking about here is bounds checking so you don\u0027t write outside your array.\n\nI do think you should validate the input elsewhere, but you should also be defensive when writing to memory like this and limit yourself to the array length.",
      "parentUuid": "4cd7319f_824554da",
      "range": {
        "startLine": 725,
        "startChar": 27,
        "endLine": 725,
        "endChar": 49
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3d8ab71_4e140a6f",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 725,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T21:58:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b3b6081_8fdd0dd3",
      "range": {
        "startLine": 725,
        "startChar": 27,
        "endLine": 725,
        "endChar": 49
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9f8c685_e8607fb3",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 730,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "same here and below",
      "range": {
        "startLine": 730,
        "startChar": 51,
        "endLine": 730,
        "endChar": 55
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57d14369_9a77f4fb",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 730,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "d9f8c685_e8607fb3",
      "range": {
        "startLine": 730,
        "startChar": 51,
        "endLine": 730,
        "endChar": 55
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "442153e2_4e6d393a",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 736,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "This creates a vector and copies over values to it resulting in an extra copy. Although I guess given the size of the vectors/arrays, this is fine.",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3270ba_5ac23600",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 736,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "I think here we only defined a new pointer which points to the existing hidl_vec\u003c\u003e, not a new copy. The real copy only happens when we do the memcpy.",
      "parentUuid": "442153e2_4e6d393a",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "225efa73_7621555b",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 736,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-30T22:45:46Z",
      "side": 1,
      "message": "typecast from hidl_vec to vector creates a copy.",
      "parentUuid": "5e3270ba_5ac23600",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abfeb366_52f27c0e",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4379,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "Can you move these to right above sendRequestRawResponse() so that all 1.1 responses are together.",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e6b60d0_576ce705",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4379,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abfeb366_52f27c0e",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecab0553_8e1c8fb6",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4389,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "Should be 8 spaces",
      "range": {
        "startLine": 4389,
        "startChar": 8,
        "endLine": 4389,
        "endChar": 12
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "224db1fd_5b8b7e70",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4389,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecab0553_8e1c8fb6",
      "range": {
        "startLine": 4389,
        "startChar": 8,
        "endLine": 4389,
        "endChar": 12
      },
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7818f9b_2c250644",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4415,
      "author": {
        "id": 1054648
      },
      "writtenOn": "2017-05-28T01:52:54Z",
      "side": 1,
      "message": "same here",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a0dd91f_c2180334",
        "filename": "libril/ril_service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4415,
      "author": {
        "id": 1148298
      },
      "writtenOn": "2017-05-30T17:23:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7818f9b_2c250644",
      "revId": "3198d7337d251e0ed2cca8418cb8138ddb01c795",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}